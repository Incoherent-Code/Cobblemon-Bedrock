/* This File was generated and/or processed with CobbleBuild.
 * These files might be overwritable in the future, but for now please submit any issues to CobbleBuild
 * instead of fixing them here. This file should not be overwritten in cobblemon-bedrock.
 */
{
  "format_version": "1.10.0",
  "animation_controllers": {
    "controller.animation.lotad.blink": {
      "initial_state": "init",
      "states": {
        "init": {
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_lotad_blink = q.life_time + math.random(2, 7); return true;"
            }
          ]
        },
        "quirk_inactive": {
          "transitions": [
            {
              "quirk_active": "v.quirk_end_lotad_blink = q.life_time + 1; return (q.life_time > v.next_quirk_lotad_blink) && (v.state_of_lotad == 0 || v.state_of_lotad == 1 || v.state_of_lotad == 2 || v.state_of_lotad == 3 || v.state_of_lotad == 4 || v.state_of_lotad == 5 || v.state_of_lotad == 6);"
            }
          ]
        },
        "quirk_active": {
          "animations": [
            "charmander.blink"
          ],
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_lotad_blink = q.life_time + math.random(2, 7); return q.all_animations_finished && (q.life_time > (v.quirk_end_lotad_blink ?? 1));"
            }
          ]
        }
      }
    },
    "controller.animation.cobblemon.lotad": {
      "initial_state": "standing",
      "states": {
        "standing": {
          "animations": [
            "lotad.ground_idle"
          ],
          "transitions": [
            {
              "waterstanding": "v.state_of_lotad = 0; return (!q.is_moving) && (q.is_in_water);"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water)"
            },
            {
              "waterwalk": "((q.is_moving && !q.is_swimming)) && (q.is_in_water)"
            },
            {
              "swim": "q.is_swimming"
            },
            {
              "sleep": "q.is_sleeping"
            }
          ],
          "blend_transition": 0.5
        },
        "waterstanding": {
          "animations": [
            "lotad.water_idle",
            "lotad.waterstanding.transform"
          ],
          "transitions": [
            {
              "standing": "v.state_of_lotad = 1; return (!q.is_moving) && (!q.is_in_water);"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water)"
            },
            {
              "waterwalk": "((q.is_moving && !q.is_swimming)) && (q.is_in_water)"
            },
            {
              "swim": "q.is_swimming"
            },
            {
              "sleep": "q.is_sleeping"
            }
          ],
          "blend_transition": 0.5
        },
        "walk": {
          "animations": [
            "lotad.ground_walk"
          ],
          "transitions": [
            {
              "standing": "v.state_of_lotad = 2; return (!q.is_moving) && (!q.is_in_water);"
            },
            {
              "waterstanding": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "waterwalk": "((q.is_moving && !q.is_swimming)) && (q.is_in_water)"
            },
            {
              "swim": "q.is_swimming"
            },
            {
              "sleep": "q.is_sleeping"
            }
          ],
          "blend_transition": 0.5
        },
        "waterwalk": {
          "animations": [
            "lotad.water_swim",
            "lotad.waterwalk.transform"
          ],
          "transitions": [
            {
              "standing": "v.state_of_lotad = 3; return (!q.is_moving) && (!q.is_in_water);"
            },
            {
              "waterstanding": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water)"
            },
            {
              "swim": "q.is_swimming"
            },
            {
              "sleep": "q.is_sleeping"
            }
          ],
          "blend_transition": 0.5
        },
        "floating": {
          "animations": [
            "lotad.water_idle",
            "lotad.floating.transform"
          ],
          "transitions": [
            {
              "standing": "v.state_of_lotad = 4; return (!q.is_moving) && (!q.is_in_water);"
            },
            {
              "waterstanding": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water)"
            },
            {
              "waterwalk": "((q.is_moving && !q.is_swimming)) && (q.is_in_water)"
            },
            {
              "swim": "q.is_swimming"
            },
            {
              "sleep": "q.is_sleeping"
            }
          ],
          "blend_transition": 0.5
        },
        "swim": {
          "animations": [
            "lotad.water_swim",
            "lotad.swim.transform"
          ],
          "transitions": [
            {
              "standing": "v.state_of_lotad = 5; return (!q.is_moving) && (!q.is_in_water);"
            },
            {
              "waterstanding": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water)"
            },
            {
              "waterwalk": "((q.is_moving && !q.is_swimming)) && (q.is_in_water)"
            },
            {
              "sleep": "q.is_sleeping"
            }
          ],
          "blend_transition": 0.5
        },
        "sleep": {
          "animations": [
            "lotad.sleep"
          ],
          "transitions": [
            {
              "standing": "v.state_of_lotad = 6; return (!q.is_moving) && (!q.is_in_water);"
            },
            {
              "waterstanding": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water)"
            },
            {
              "waterwalk": "((q.is_moving && !q.is_swimming)) && (q.is_in_water)"
            },
            {
              "swim": "q.is_swimming"
            }
          ],
          "blend_transition": 0.5
        }
      }
    }
  }
}