/* This File was generated with CobbleBuild.
 * These files might be overwritable in the future, but for now please submit any issues to CobbleBuild
 * instead of fixing them here. 
 */
{
  "format_version": "1.10.0",
  "animation_controllers": {
    "controller.animation.wingull.blink": {
      "initial_state": "init",
      "states": {
        "init": {
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_wingull_blink = q.life_time + math.random(2, 7); return true;"
            }
          ]
        },
        "quirk_inactive": {
          "transitions": [
            {
              "quirk_active": "v.quirk_end_wingull_blink = q.life_time + 1; return (q.life_time > v.next_quirk_wingull_blink) && (v.state_of_wingull == 2 || v.state_of_wingull == 3 || v.state_of_wingull == 4 || v.state_of_wingull == 5 || v.state_of_wingull == 6 || v.state_of_wingull == 7);"
            }
          ]
        },
        "quirk_active": {
          "animations": [
            "wingull.blink"
          ],
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_wingull_blink = q.life_time + math.random(2, 7); return q.all_animations_finished && (q.life_time > (v.quirk_end_wingull_blink ?? 1));"
            }
          ]
        }
      }
    },
    "controller.animation.cobblemon.wingull": {
      "initial_state": "sleep",
      "states": {
        "sleep": {
          "animations": [
            "wingull.sleep"
          ],
          "transitions": [
            {
              "water_surface_sleep": "v.state_of_wingull = 0; return (q.is_sleeping) && (q.is_in_water);"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "water_surface_sleep": {
          "animations": [
            "wingull.surfacewater_sleep",
            "wingull.water_surface_sleep.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 1; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "stand": {
          "animations": [
            "wingull.ground_idle"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 2; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "water_surface_sleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "hover": {
          "animations": [
            "pelipper.air_idle"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 3; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "water_surface_sleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "fly": {
          "animations": [
            "pelipper.air_fly"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 4; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "water_surface_sleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "walk": {
          "animations": [
            "wingull.ground_walk"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 5; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "water_surface_sleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "water_surface_idle": {
          "animations": [
            "wingull.surfacewater_idle",
            "wingull.water_surface_idle.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 6; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "water_surface_sleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "water_surface_swim": {
          "animations": [
            "wingull.surfacewater_swim",
            "wingull.water_surface_swim.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_wingull = 7; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "water_surface_sleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "stand": "(!q.is_moving) && (!q.is_in_water)"
            },
            {
              "hover": "!q.is_in_water"
            },
            {
              "fly": "!q.is_in_water"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)|| q.is_swimming) && (!q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        }
      }
    }
  }
}