/* This File was generated with CobbleBuild.
 * These files might be overwritable in the future, but for now please submit any issues to CobbleBuild
 * instead of fixing them here. 
 */
{
  "format_version": "1.10.0",
  "animation_controllers": {
    "controller.animation.totodile.blink": {
      "initial_state": "init",
      "states": {
        "init": {
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_totodile_blink = q.life_time + math.random(2, 7); return true;"
            }
          ]
        },
        "quirk_inactive": {
          "transitions": [
            {
              "quirk_active": "v.quirk_end_totodile_blink = q.life_time + 1; return (q.life_time > v.next_quirk_totodile_blink) && (v.state_of_totodile == 2 || v.state_of_totodile == 3 || v.state_of_totodile == 4 || v.state_of_totodile == 5 || v.state_of_totodile == 6 || v.state_of_totodile == 7 || v.state_of_totodile == 8 || v.state_of_totodile == 9 || v.state_of_totodile == 10);"
            }
          ]
        },
        "quirk_active": {
          "animations": [
            "totodile.blink"
          ],
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_totodile_blink = q.life_time + math.random(2, 7); return q.all_animations_finished && (q.life_time > (v.quirk_end_totodile_blink ?? 1));"
            }
          ]
        }
      }
    },
    "controller.animation.totodile.sleepQuirk": {
      "initial_state": "init",
      "states": {
        "init": {
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_totodile_sleepQuirk = q.life_time + math.random(2, 7); return true;"
            }
          ]
        },
        "quirk_inactive": {
          "transitions": [
            {
              "quirk_active": "v.quirk_end_totodile_sleepQuirk = q.life_time + 1; return (q.life_time > v.next_quirk_totodile_sleepQuirk) && (v.state_of_totodile == 0 || v.state_of_totodile == 1);"
            }
          ]
        },
        "quirk_active": {
          "animations": [
            "totodile.sleep_quirk"
          ],
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_totodile_sleepQuirk = q.life_time + math.random(2, 7); return q.all_animations_finished && (q.life_time > (v.quirk_end_totodile_sleepQuirk ?? 1));"
            }
          ]
        }
      }
    },
    "controller.animation.totodile.biteyQuirk": {
      "initial_state": "init",
      "states": {
        "init": {
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_totodile_biteyQuirk = q.life_time + math.random(2, 7); return true;"
            }
          ]
        },
        "quirk_inactive": {
          "transitions": [
            {
              "quirk_active": "v.quirk_end_totodile_biteyQuirk = q.life_time + 1; return (q.life_time > v.next_quirk_totodile_biteyQuirk) && (v.state_of_totodile == 2 || v.state_of_totodile == 4 || v.state_of_totodile == 7);"
            }
          ]
        },
        "quirk_active": {
          "animations": [
            "totodile.bitey_quirk"
          ],
          "transitions": [
            {
              "quirk_inactive": "v.next_quirk_totodile_biteyQuirk = q.life_time + math.random(2, 7); return q.all_animations_finished && (q.life_time > (v.quirk_end_totodile_biteyQuirk ?? 1));"
            }
          ]
        }
      }
    },
    "controller.animation.cobblemon.totodile": {
      "initial_state": "standing",
      "states": {
        "sleep": {
          "animations": [
            "totodile.sleep"
          ],
          "transitions": [
            {
              "watersleep": "v.state_of_totodile = 0; return (q.is_sleeping) && (q.is_in_water);"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "watersleep": {
          "animations": [
            "totodile.water_sleep"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 1; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "standing": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.ground_idle"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 2; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "walk": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.ground_walk"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 3; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "floating": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.water_idle"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 4; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "swimming": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.water_swim"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 5; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "battleidle": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.battle_idle"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 6; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "water_surface_idle": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.surfacewater_idle",
            "totodile.water_surface_idle.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 7; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "water_surface_swim": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.surfacewater_swim",
            "totodile.water_surface_swim.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 8; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "shoulderLeft": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.shoulder_right",
            "totodile.shoulderleft.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 9; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        },
        "shoulderRight": {
          "animations": [
            "totodilemodel.singlebonelook",
            "totodile.shoulder_left",
            "totodile.shoulderright.transform"
          ],
          "transitions": [
            {
              "sleep": "v.state_of_totodile = 10; return (q.is_sleeping) && (!q.is_in_water);"
            },
            {
              "watersleep": "(q.is_sleeping) && (q.is_in_water)"
            },
            {
              "standing": "(!q.is_moving) && (!q.property('cobblemon:in_battle') && !q.is_in_water && !q.is_swimming)"
            },
            {
              "walk": "((q.is_moving && !q.is_swimming)) && (!q.is_in_water && !q.is_swimming)"
            },
            {
              "floating": "q.is_swimming"
            },
            {
              "swimming": "(q.is_swimming) && (q.is_swimming)"
            },
            {
              "battleidle": "(!q.is_moving) && (q.property('cobblemon:in_battle') && !q.is_in_water)"
            },
            {
              "water_surface_idle": "(!q.is_moving) && (!q.is_swimming && q.is_in_water)"
            },
            {
              "water_surface_swim": "(q.is_moving) && (!q.is_swimming && q.is_in_water)"
            }
          ],
          "blend_transition": 0.5
        }
      }
    }
  }
}